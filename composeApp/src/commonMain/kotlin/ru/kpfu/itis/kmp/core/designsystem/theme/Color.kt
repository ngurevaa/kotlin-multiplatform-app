package ru.kpfu.itis.kmp.core.designsystem.theme

import androidx.compose.ui.graphics.Color
import ru.kpfu.itis.kmp.core.designsystem.color.Colors

val primaryLight = Color(Colors.primaryLight)
val onPrimaryLight = Color(Colors.onPrimaryLight)
val primaryContainerLight = Color(Colors.primaryContainerLight)
val onPrimaryContainerLight = Color(Colors.onPrimaryContainerLight)
val secondaryLight = Color(Colors.secondaryLight)
val onSecondaryLight = Color(Colors.onSecondaryLight)
val secondaryContainerLight = Color(Colors.secondaryContainerLight)
val onSecondaryContainerLight = Color(Colors.onSecondaryContainerLight)
val tertiaryLight = Color(Colors.tertiaryLight)
val onTertiaryLight = Color(Colors.onTertiaryLight)
val tertiaryContainerLight = Color(Colors.tertiaryContainerLight)
val onTertiaryContainerLight = Color(Colors.onTertiaryContainerLight)
val errorLight = Color(Colors.errorLight)
val onErrorLight = Color(Colors.onErrorLight)
val errorContainerLight = Color(Colors.errorContainerLight)
val onErrorContainerLight = Color(Colors.onErrorContainerLight)
val backgroundLight = Color(Colors.backgroundLight)
val onBackgroundLight = Color(Colors.onBackgroundLight)
val surfaceLight = Color(Colors.surfaceLight)
val onSurfaceLight = Color(Colors.onSurfaceLight)
val surfaceVariantLight = Color(Colors.surfaceVariantLight)
val onSurfaceVariantLight = Color(Colors.onSurfaceVariantLight)
val outlineLight = Color(Colors.outlineLight)
val outlineVariantLight = Color(Colors.outlineVariantLight)
val scrimLight = Color(Colors.scrimLight)
val inverseSurfaceLight = Color(Colors.inverseSurfaceLight)
val inverseOnSurfaceLight = Color(Colors.inverseOnSurfaceLight)
val inversePrimaryLight = Color(Colors.inversePrimaryLight)
val surfaceDimLight = Color(Colors.surfaceDimLight)
val surfaceBrightLight = Color(Colors.surfaceBrightLight)
val surfaceContainerLowestLight = Color(Colors.surfaceContainerLowestLight)
val surfaceContainerLowLight = Color(Colors.surfaceContainerLowLight)
val surfaceContainerLight = Color(Colors.surfaceContainerLight)
val surfaceContainerHighLight = Color(Colors.surfaceContainerHighLight)
val surfaceContainerHighestLight = Color(Colors.surfaceContainerHighestLight)

val primaryDark = Color(Colors.primaryDark)
val onPrimaryDark = Color(Colors.onPrimaryDark)
val primaryContainerDark = Color(Colors.primaryContainerDark)
val onPrimaryContainerDark = Color(Colors.onPrimaryContainerDark)
val secondaryDark = Color(Colors.secondaryDark)
val onSecondaryDark = Color(Colors.onSecondaryDark)
val secondaryContainerDark = Color(Colors.secondaryContainerDark)
val onSecondaryContainerDark = Color(Colors.onSecondaryContainerDark)
val tertiaryDark = Color(Colors.tertiaryDark)
val onTertiaryDark = Color(Colors.onTertiaryDark)
val tertiaryContainerDark = Color(Colors.tertiaryContainerDark)
val onTertiaryContainerDark = Color(Colors.onTertiaryContainerDark)
val errorDark = Color(Colors.errorDark)
val onErrorDark = Color(Colors.onErrorDark)
val errorContainerDark = Color(Colors.errorContainerDark)
val onErrorContainerDark = Color(Colors.onErrorContainerDark)
val backgroundDark = Color(Colors.backgroundDark)
val onBackgroundDark = Color(Colors.onBackgroundDark)
val surfaceDark = Color(Colors.surfaceDark)
val onSurfaceDark = Color(Colors.onSurfaceDark)
val surfaceVariantDark = Color(Colors.surfaceVariantDark)
val onSurfaceVariantDark = Color(Colors.onSurfaceVariantDark)
val outlineDark = Color(Colors.outlineDark)
val outlineVariantDark = Color(Colors.outlineVariantDark)
val scrimDark = Color(Colors.scrimDark)
val inverseSurfaceDark = Color(Colors.inverseSurfaceDark)
val inverseOnSurfaceDark = Color(Colors.inverseOnSurfaceDark)
val inversePrimaryDark = Color(Colors.inversePrimaryDark)
val surfaceDimDark = Color(Colors.surfaceDimDark)
val surfaceBrightDark = Color(Colors.surfaceBrightDark)
val surfaceContainerLowestDark = Color(Colors.surfaceContainerLowestDark)
val surfaceContainerLowDark = Color(Colors.surfaceContainerLowDark)
val surfaceContainerDark = Color(Colors.surfaceContainerDark)
val surfaceContainerHighDark = Color(Colors.surfaceContainerHighDark)
val surfaceContainerHighestDark = Color(Colors.surfaceContainerHighestDark)
